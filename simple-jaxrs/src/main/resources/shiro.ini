# Here is the set up for some usernames and passwords along with specific permissions. In a dynamic users application you would 
# get users and their permissions some other way, such as LDAP or from a database.
# User Peter is given the "directory-user" role and user Sarah both "directory-user" and "employee-admin" role
[users]
Peter = P3ter, directory-user
Sarah = S4rah, directory-user, employee-admin

# The roles and permissions; "directory-user"s can only get employee details and "employee-admin"s can do anything (*) with an employee.. oo-er missus!
[roles]
directory-user = employee:get
employee-admin = employee:*


# This section sets up the web application security via Filters; the goal here is to secure relevant resources and to provide a completely STATELESS
# external rest API yet provide a STATEFUL experience to users of the web application and to keep the rest API detached from authentication
# processes.
# Because there are two mappings to the Jersey servlet in web.xml with distinct URLs this allows a different authentication and session
# management strategy to be applied to different uses of the rest services.

# There are different security filters configured with URL paterns matched to particular filter(s).
# Anonymous (the "anon" filter) permits configured resources to be accessed by anyone (e.g images, scripts, style sheets etc).
# HTTP (the "authcBasic" filter) Basic Authentication filter for resources that must be authenticated by HTTP Basic Authentication
# A filter (the "noSessionCreation" filter) that ensures no sessions are created for a request / authentication which is used alongside
# the http basic authentication filter.
# A form parameters authenticating filter (the "authc" filter) that detects a POSTing of username and password request parameters and
# authenticates the user. In the configuration below "/login.html" is secured with this filter but the corresponding "authc.loginUrl" in
# the "main" section tells Shiro that this special resource can be accessed when not authenticated.
# A custom filter (the "ajaxApiFilter" filter) that checks that the request is coming from a logged in user and returns a custom WWW-Authenticate header
# if they are not.
# A logout (the "logout" filter) that automatically logs a user out and redirects to a configured URL.

# Note the "anon", "authc", "noSessionCreation", "authcBasic" and "logout" filters are provided out of the box by Shiro.
# Also note that Shiro matches the request against these configurations in the order they are declared in the below configuration
# and the filter chosen is the first whose pattern matches against the requested url hence the "/** = anon" doesn't allow all requests through
# but instead is only applied in the event that the request pattern does not match any of the preceeding configurations.  


[urls]
/index.html = anon
/login.html = authc
/app.html = authc
/logout = logout
/rest-webapp/** = ajaxApiFilter
/rest-api/employees/** = noSessionCreation, authcBasic
/** = anon

# Here we configure some parameters for the Form based authentication (authc) which tell Shiro where the login page is
# and the default location to redirect after a successful login, the logout filter telling it where to redirect after login
# and the custom com.marcusbond.jaxrs.shiro.HTTPStatusCodeAuthenticationFilter named "ajaxApiFilter".
[main]

ajaxApiFilter = com.marcusbond.jaxrs.shiro.HTTPStatusCodeAuthenticationFilter

authc.loginUrl = /login.html
authc.successUrl = /app.html
logout.redirectUrl = /login.html