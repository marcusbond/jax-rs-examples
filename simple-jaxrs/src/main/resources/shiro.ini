# Here is the set up for some usernames and passwords along with specific permissions. In a dynamic users application you would 
# get users and their permissions some other way, such as LDAP or from a database.
# User Peter is given the "directory-user" role and user Sarah both "directory-user" and "employee-admin" role
[users]
Peter = P3ter, directory-user
Sarah = S4rah, directory-user, employee-admin

# The roles and permissions; "directory-user"s can only get employee details and "employee-admin"s can do anything (*) with an employee.. oo-er missus!
[roles]
directory-user = employee:get
employee-admin = employee:*


# This section sets up the web application security, the goal here is to secure relevant resources and to provide a completely STATELESS
# External rest API yet provide a STATEFUL experience to users of the web application..
# Because there are two mappings to the Jersey servlet in web.xml with distinct URLs this allows a different authentication and session
# management strategy to be applied to different uses of the rest services.

# There are three security approaches in use here: anonymous access (anyone can access), basic authentication per request and
# a form based login that maintains a session (note sessions are ON by default).
# noSessionCreation is a Shiro feature to ensure there will be no session created for matching requests. 
# authcBasic is an out of the box Shiro default filter which checks the HTTP request for Authentication headers
# authc is an out of the box form authentication filter which by default looks for the request parameters "username" and "password"
# anon signifies that there is no security check for these urls.
# The final url config item to notice is /logout which uses the Shiro built in "logout" filter automatically logging out a user.

# Note that Shiro matches the request against these configurations in order so despite appearing as though everything is permitted
# by the anon entry in fact Shiro will evaluate the preceeding configurations first and only if the request does not match any of
# those URL patterns will it be allowed through without authentication. Note also that login.html is secured however because of a later
# configuration to inform Shiro of the "authc.loginUrl" this "special "resource can be accessed when not authenticated.

[urls]
/rest-api/employees/** = noSessionCreation, authcBasic
/index.html = anon
/login.html = authc
/app.html = authc
/rest-webapp/** = authc
/logout = logout
/** = anon

# Here we configure some parameters for the Form based authentication (authc) which tell Shiro where the login page is
# and the default location to redirect after a successful login.
[main]

authc.loginUrl = /login.html
authc.successUrl = /app.html
logout.redirectUrl = /login.html