<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">

	<!-- Tell Spring where to look for annotated classes. -->
	<context:component-scan base-package="com.marcusbond.jaxrs" />
	
	
	<!-- Shiro configuration with Spring -->
	<!-- Enable Shiro Annotations (e.g. RequiresPermissions) for Spring-configured beans. -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>	
	<bean
		class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
		depends-on="lifecycleBeanPostProcessor" />
	<bean
		class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean>
	
	<!--The Shiro securityManager bean -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
	    <property name="realm" ref="realm"/>
	</bean>
	<!-- For the demo we continue to use shiro.ini for user and roles config so the "realm" is a Shiro IniRealm. -->
	<bean id="realm" class="org.apache.shiro.realm.text.IniRealm">
		<property name="resourcePath" value="classpath:shiro.ini" />
	</bean>
	
	<!-- Shiro Web Filter configuration (moved from shiro.ini) -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<property name="filterChainDefinitions">
			<value>
				/index.html = anon
				/login.html = authc
				/app.html = authc
				/logout = logout
				/rest-webapp/** = ajaxApiFilter
				/rest-api/employees/** = noSessionCreation, authcBasic
				/** = anon
			</value>
		</property>
	</bean>	
	
	<!-- The Shiro filters, not strictly necessary when there is nothing to set 
			but declaring them makes their definitions explicit
	-->
	<bean name="noSessionCreation"
		class="org.apache.shiro.web.filter.session.NoSessionCreationFilter" />
	<bean name="authcBasic"
		class="org.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilter" />
	<!-- The authc filter with login and success urls -->
	<bean name="authc"
		class="org.apache.shiro.web.filter.authc.FormAuthenticationFilter">
		<property name="loginUrl" value="/login.html" />
		<property name="successUrl" value="/app.html" />
	</bean>
	<!-- The logout filter -->
	<bean name="logout"
		class="org.apache.shiro.web.filter.authc.LogoutFilter">
		<property name="redirectUrl" value="/login.html" />
	</bean>
	<!-- Custom filter that just looks for a session and returns a HTTP status in the event there is no current session -->
	<bean name="ajaxApiFilter"
		class="com.marcusbond.jaxrs.shiro.HTTPStatusCodeAuthenticationFilter" />

	<!-- ####### About the Shiro Configuration #######
	This section sets up the web application security via Filters; the goal here is to secure relevant resources and to provide a completely STATELESS
	external rest API yet provide a STATEFUL experience to users of the web application and to keep the rest API detached from authentication
	processes.
	
	Because there are two mappings to the Jersey servlet in web.xml with distinct URLs this allows a different authentication and session
	management strategy to be applied to different uses of the rest services.
	
	There are different security filters configured with URL paterns matched to particular filter(s).
	Anonymous (the "anon" filter) permits configured resources to be accessed by anyone (e.g images, scripts, style sheets etc).
	HTTP (the "authcBasic" filter) Basic Authentication filter for resources that must be authenticated by HTTP Basic Authentication.
	A filter (the "noSessionCreation" filter) that ensures no sessions are created for a request / authentication which is used alongside
	the http basic authentication filter.
	A form parameters authenticating filter (the "authc" filter) that detects a POSTing of username and password request parameters and
	authenticates the user. In the configuration above "/login.html" is secured with this filter but the corresponding "loginUrl" is
	set on the "authc" bean which tells Shiro that this special resource can be accessed when not authenticated.
	A custom filter (the "ajaxApiFilter" filter) that checks that the request is coming from a logged in user and returns a custom WWW-Authenticate header
	if they are not.
	A logout (the "logout" filter) that automatically logs a user out and redirects to an injected URL.
	
	Note the "anon", "authc", "noSessionCreation", "authcBasic" and "logout" filters are provided out of the box by Shiro.
	Also note that Shiro matches the request against these configurations in the order they are declared in the below configuration
	and the filter chosen is the first whose pattern matches against the requested url hence the "/** = anon" doesn't allow all requests through
	but instead is only applied in the event that the request pattern does not match any of the preceeding configurations.  
	-->	
</beans>
